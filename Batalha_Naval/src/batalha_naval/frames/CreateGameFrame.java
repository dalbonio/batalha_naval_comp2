/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package batalha_naval.frames;

import batalha_naval.self_made_components.swing_components.BlockLabel;
import batalha_naval.self_made_components.exceptions.InvalidPositionException;
import batalha_naval.self_made_components.exceptions.VehiclePreviouslySelectedException;
import batalha_naval.self_made_components.beans.JetFighter;
import batalha_naval.self_made_components.beans.NavioEscolta;
import batalha_naval.self_made_components.beans.PortaAviao;
import batalha_naval.self_made_components.beans.Submarino;
import batalha_naval.self_made_components.beans.Vehicle;
import batalha_naval.self_made_components.exceptions.EmptyFileException;
import batalha_naval.self_made_components.util.FileUtils;
import batalha_naval.self_made_components.util.Position;
import java.awt.Color;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.File;
import javax.naming.SizeLimitExceededException;
import javax.swing.ImageIcon;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.SwingConstants;
import javax.swing.SwingUtilities;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.filechooser.FileSystemView;
import batalha_naval.self_made_components.util.MapUtils;
import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author Lucas
 */
public final class CreateGameFrame extends javax.swing.JFrame {

    /**
     * Creates new form CreateGameFrame
     * @param restartMap
     */
    public CreateGameFrame( int[][] restartMap ) 
    {
        initComponents();
        setLocationRelativeTo(null);
        labelMatrix = new BlockLabel[10][10];
        initConstantsPanel();
        initLabelMatrixes();
        
        jet_images = new ImageIcon[2];
        submarine_images = new ImageIcon[2];
        navio_escolta_images = new ImageIcon[3];
        porta_aviao_images = new ImageIcon[4];              
        
        initImageIconArrays();
        setAllButtonListeners();
        addListenerOnComboBoxLabel();
        
        setCorrectVehicleArrayByName();
        
        if( restartMap != null )
        {
            transformIntMatrixToBlockMatrix( restartMap, labelMatrix );
            intMatrix = restartMap;
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelPlayer = new javax.swing.JPanel();
        numberPanelPlayer = new javax.swing.JPanel();
        charPanelPlayer = new javax.swing.JPanel();
        tablePanel = new javax.swing.JPanel();
        loadFileButton = new javax.swing.JButton();
        randomButton = new javax.swing.JButton();
        vehicleComboBox = new javax.swing.JComboBox<>();
        comboBoxImage = new javax.swing.JLabel();
        startGame = new javax.swing.JButton();
        fileMessage = new javax.swing.JLabel();
        background_img = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(1440, 900));
        setMinimumSize(new java.awt.Dimension(1440, 900));
        setPreferredSize(new java.awt.Dimension(1440, 900));
        setResizable(false);
        getContentPane().setLayout(null);

        panelPlayer.setLayout(new java.awt.GridLayout(10, 10));
        getContentPane().add(panelPlayer);
        panelPlayer.setBounds(200, 100, 600, 720);

        numberPanelPlayer.setOpaque(false);
        numberPanelPlayer.setLayout(new java.awt.GridLayout(1, 10));
        getContentPane().add(numberPanelPlayer);
        numberPanelPlayer.setBounds(200, 60, 600, 40);

        charPanelPlayer.setOpaque(false);
        charPanelPlayer.setLayout(new java.awt.GridLayout(10, 1));
        getContentPane().add(charPanelPlayer);
        charPanelPlayer.setBounds(160, 100, 40, 720);

        tablePanel.setMaximumSize(new java.awt.Dimension(480, 900));
        tablePanel.setLayout(null);

        loadFileButton.setBackground(new java.awt.Color(153, 255, 153));
        loadFileButton.setFont(new java.awt.Font("Lucida Sans", 2, 20)); // NOI18N
        loadFileButton.setText("Escolher Arquivo");
        tablePanel.add(loadFileButton);
        loadFileButton.setBounds(100, 460, 290, 60);

        randomButton.setBackground(new java.awt.Color(153, 255, 153));
        randomButton.setFont(new java.awt.Font("Lucida Sans", 2, 20)); // NOI18N
        randomButton.setText("Montar Aleatóriamente");
        randomButton.setFocusPainted(false);
        tablePanel.add(randomButton);
        randomButton.setBounds(100, 350, 290, 60);

        vehicleComboBox.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        vehicleComboBox.setMaximumRowCount(4);
        vehicleComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Jato", "Submarino", "Navio Escolta", "Porta Avião" }));
        tablePanel.add(vehicleComboBox);
        vehicleComboBox.setBounds(170, 80, 150, 25);

        comboBoxImage.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        comboBoxImage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/vehicles/Jato_completo.png"))); // NOI18N
        comboBoxImage.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        tablePanel.add(comboBoxImage);
        comboBoxImage.setBounds(80, 130, 320, 120);

        startGame.setBackground(new java.awt.Color(153, 255, 153));
        startGame.setFont(new java.awt.Font("Lucida Sans", 2, 20)); // NOI18N
        startGame.setText("Iniciar Batalha");
        tablePanel.add(startGame);
        startGame.setBounds(100, 760, 290, 60);

        fileMessage.setFont(new java.awt.Font("Trebuchet MS", 1, 16)); // NOI18N
        fileMessage.setText("<html><body>Caso alguma posição sobrepor outra, também será inválida</body></html>");
        tablePanel.add(fileMessage);
        fileMessage.setBounds(10, 520, 460, 50);
        fileMessage.getAccessibleContext().setAccessibleName("");

        getContentPane().add(tablePanel);
        tablePanel.setBounds(960, 0, 480, 900);

        background_img.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/backgrounds/background_create_game.jpg"))); // NOI18N
        getContentPane().add(background_img);
        background_img.setBounds(0, 0, 1440, 900);

        pack();
    }// </editor-fold>//GEN-END:initComponents
   
     public void initLabelMatrixes()
    {      
        Color color = new Color( 0, 0, 0 );
        
        for( int i = 0; i < 10; i++ )
        {           
            for(int j = 0; j < 10; j++ )
            {
                labelMatrix[i][j] = new BlockLabel( new Position( i, j ) );                              
                initLabel( labelMatrix[i][j], color, panelPlayer );                                   
            }
        }
        
         pack();
    }
     
     public void initLabel( BlockLabel label, Color color, JPanel panel )
    {
        label.setOpaque( false );        
        label.setVehicle( null );
        
        //passar border por parametro
        label.setBorder( javax.swing.BorderFactory.createLineBorder( color ) );
        
        panel.add( label );
    }
    
    public void initConstantsPanel()
    {
        JLabel label1;
        for(int i = 0; i < 10; i++)
        {
            label1 = new JLabel( String.valueOf( (char)( 'A' + i ) ), SwingConstants.CENTER );                    
            
            label1.setOpaque( false );
            
            label1.setForeground( Color.WHITE );
            
            label1.setFont(new Font("Serif", Font.PLAIN, 23));         
            
            charPanelPlayer.add( label1 );
        }
        
        JLabel label3;
        
        for(int i = 0; i < 10; i++)
        {
            label3 = new JLabel( String.valueOf( i + 1 ), SwingConstants.CENTER );                           
            
            label3.setOpaque( false );
            
            label3.setForeground( Color.WHITE );
            
            label3.setFont(new Font("Serif", Font.PLAIN, 23));
            
            numberPanelPlayer.add( label3 );
        }
    }
    
    public void setAllButtonListeners()
    {
        for(int i = 0; i < 10; i++)
        {           
            for(int j = 0; j < 10; j++)
            {
                labelMatrix[i][j].addMouseListener( new MouseAdapter()
                {
                   @Override
                   public void mouseClicked( MouseEvent e )
                   {
                        BlockLabel clickedLabel = ( (BlockLabel)e.getSource() );
                        
                        boolean isLeftClick = SwingUtilities.isLeftMouseButton( e );
                        if( isLeftClick )
                        {
                            labelMatrixActionLeftClick( clickedLabel );
                        }
                        else
                        {
                            labelMatrixActionRightClick( clickedLabel );
                        }
                   }
               });
            }
        }
        
       loadFileButton.addActionListener( new ActionListener()
       {
           @Override
           public void actionPerformed( ActionEvent e )
           {
                File file = chooseFile();
                
                if( file != null )
                {
                    String path = file.getAbsolutePath();
                    
                    List<String> fileLines = new ArrayList<>();
                    
                    try 
                    {                             
                        FileReader fileReader = new FileReader( path );
                        
                        BufferedReader buffReader = new BufferedReader( fileReader );
                        
                        String currentLine;

			while ( ( currentLine = buffReader.readLine() ) != null) 
                        {
				fileLines.add( currentLine );
			}
                        
                        FileUtils.isFileValid( fileLines );
                        
                        int[][] map = MapUtils.generateMap( fileLines.toArray( new String[ fileLines.size() ] ) );
                        
                        transformIntMatrixToBlockMatrix( map, labelMatrix );
                        
                        intMatrix = map;
                    }
                    catch (FileNotFoundException ex) 
                    {
                        JOptionPane.showMessageDialog(null, "Arquivo não encontrado");
                    } 
                    catch (IOException ex) 
                    {
                        JOptionPane.showMessageDialog(null, "Entrada nao identificada");
                    } 
                    catch (EmptyFileException ex)
                    {
                        JOptionPane.showMessageDialog(null, "Arquivo Vazio");
                    }   
                }
           }
       });
       
       randomButton.addActionListener( new ActionListener()
       {
           @Override
           public void actionPerformed( ActionEvent e )
           {
                int[][] map = MapUtils.createRandomMap();
                
                transformIntMatrixToBlockMatrix( map, labelMatrix );
                
                intMatrix = map;
           }
           
       });
       
       startGame.addActionListener( new ActionListener()
       {
            @Override
            public void actionPerformed( ActionEvent e ) 
            {
                if( isPossibleToStart() )
                {
                    GameFrame gameFrame = new GameFrame( labelMatrix, getIntMatrixFromBlockMatrix( labelMatrix ) );

                    gameFrame.setVisible( true );                                        
                    
                    dispose();
                }
                else
                {
                    JOptionPane.showMessageDialog( null, "Mapa Incompleto" );
                }
            }
           
       });
    }
    
    public void labelMatrixActionRightClick( BlockLabel clickedLabel )
    {
        Vehicle vehicleToBeRemoved = clickedLabel.getVehicle();
        
        for( int i = 0; i < 10; i++ )
        {           
            for(int j = 0; j < 10; j++ )
            {
                Vehicle labelMatrixVehicle = labelMatrix[i][j].getVehicle();
                if( labelMatrixVehicle != null )
                {
                    if( labelMatrixVehicle.equals( vehicleToBeRemoved ) )
                    {
                        labelMatrix[i][j].setIcon( null );
                        labelMatrix[i][j].setVehicle( null );
                        labelMatrix[i][j].setType( 0 );
                    }
                }                                                                       
            }
        }
    }
    
    public void labelMatrixActionLeftClick(BlockLabel clickedLabel )
    {       
        Position<Integer, Integer> position = clickedLabel.getPosition();                                                     
        
        try 
        {
            MapUtils.isPositionValid(labelMatrix, selectedVehicle, position.getX(), position.getY() );

            //check for previously selected vehicles
            for(int i = 0; i < 10; i++)
            {
                for(int j = 0; j < 10; j++)
                {
                    Vehicle labelMatrixVehicle = labelMatrix[i][j].getVehicle();
                    if( labelMatrixVehicle != null )
                    {
                        if( labelMatrixVehicle.equals( selectedVehicle ) )
                        {
                            throw new VehiclePreviouslySelectedException();
                        }
                    }                  
                }
            }
            
            //adicionar veiculo selecionado no mapa;
            for( int pos = 0; pos < correctImageIconArray.length; pos++)
            {
                labelMatrix[position.getX()][position.getY() + pos].setIcon( correctImageIconArray[pos] );
                labelMatrix[position.getX()][position.getY() + pos].setVehicle( selectedVehicle );
            }

        } 
        catch (SizeLimitExceededException ex) 
        {
            JOptionPane.showMessageDialog(null, "Posicao Invalida, Veículo não cabe");
        } 
        catch (InvalidPositionException ex) 
        {
            JOptionPane.showMessageDialog(null, "Posicao Invalida, já existe um veículo no local.\nClique com o botao direito no veículo caso queira remove-lo");
        } 
        catch (VehiclePreviouslySelectedException ex) 
        {
             JOptionPane.showMessageDialog(null, "Já existe esse veículo no mapa.\nClique com o botao direito no veículo caso queira remove-lo");
        }
    }
    
    public File chooseFile()
    {
        JFileChooser fileChooser = new JFileChooser( FileSystemView.getFileSystemView().getHomeDirectory() );
        
        fileChooser.addChoosableFileFilter(new FileNameExtensionFilter("*.txt", "txt"));        

        int returnValue = fileChooser.showOpenDialog(null);
        // int returnValue = jfc.showSaveDialog(null);

        if ( returnValue == JFileChooser.APPROVE_OPTION ) 
        {
                File selectedFile = fileChooser.getSelectedFile();
                
                return selectedFile;
        }
        else
        {
            return null;
        }
    }
    /* Updates the comboBox Label. */
    public void updateLabel(String name) 
    {
        ImageIcon icon = createImageIcon("/resources/vehicles/" + name + "_completo.png");
        comboBoxImage.setIcon(icon);
        //comboBoxImage.setToolTipText("A drawing of a " + name.toLowerCase());
        
        if (icon != null) 
        {
            comboBoxImage.setText(null);
        } 
        else 
        {
            comboBoxImage.setText("Image not found");
        }
    }
    
    public ImageIcon createImageIcon(String path) {
        java.net.URL imgURL = getClass().getResource(path);
        if (imgURL != null) 
        {
            return new ImageIcon(imgURL);
        } 
        else 
        {
            System.err.println("Couldn't find file: " + path);
            return null;
        }
    }
    
    public void addListenerOnComboBoxLabel()
    {
        ActionListener comboBoxListener = new ActionListener()
        {
            @Override
            public void actionPerformed(ActionEvent e) 
            {
               JComboBox comboBox = (JComboBox)e.getSource();
               String vehicleName = (String)comboBox.getSelectedItem();
               updateLabel(vehicleName);
               setCorrectVehicleArrayByName();
            }           
        };
        
        vehicleComboBox.addActionListener( comboBoxListener );      
    }

    public void initImageIconArrays()
    {
        jet_images[0] = new ImageIcon( getClass().getResource("/resources/vehicles/jet_1.png") );
        jet_images[1] = new ImageIcon( getClass().getResource("/resources/vehicles/jet_2.png") );
        
        submarine_images[0] = new ImageIcon( getClass().getResource("/resources/vehicles/submarine_1.png") );
        submarine_images[1] = new ImageIcon( getClass().getResource("/resources/vehicles/submarine_2.png") );
        
        navio_escolta_images[0] = new ImageIcon( getClass().getResource("/resources/vehicles/navio_escolta_1.png") );
        navio_escolta_images[1] = new ImageIcon( getClass().getResource("/resources/vehicles/navio_escolta_2.png") );
        navio_escolta_images[2] = new ImageIcon( getClass().getResource("/resources/vehicles/navio_escolta_3.png") );
        
        porta_aviao_images[0] = new ImageIcon( getClass().getResource("/resources/vehicles/porta_aviao_real_1.png") );
        porta_aviao_images[1] = new ImageIcon( getClass().getResource("/resources/vehicles/porta_aviao_real_2.png") );
        porta_aviao_images[2] = new ImageIcon( getClass().getResource("/resources/vehicles/porta_aviao_real_3.png") );
        porta_aviao_images[3] = new ImageIcon( getClass().getResource("/resources/vehicles/porta_aviao_real_4.png") );
    }
    
    public void setCorrectVehicleArrayByName() 
    {
        String comboBoxItem = (String)vehicleComboBox.getSelectedItem();
        
        switch (comboBoxItem) 
        {
            case "Jato":
                correctImageIconArray = jet_images;
                selectedVehicle = new JetFighter();
                break;
            case "Submarino":
                correctImageIconArray = submarine_images;
                selectedVehicle = new Submarino();
                break;
            case "Navio Escolta":
                correctImageIconArray = navio_escolta_images;
                selectedVehicle = new NavioEscolta();
                break;
            case "Porta Avião":
                correctImageIconArray = porta_aviao_images;
                selectedVehicle = new PortaAviao();
                break;
            default:
                break;
        }        
    }
    
    public void setCorrectVehicleArrayByType( int type ) 
    {   
        switch ( type ) 
        {
            case 1:
                correctImageIconArray = jet_images;
                selectedVehicle = new JetFighter();
                break;
            case 2:
                correctImageIconArray = submarine_images;
                selectedVehicle = new Submarino();
                break;
            case 3:
                correctImageIconArray = navio_escolta_images;
                selectedVehicle = new NavioEscolta();
                break;
            case 4:
                correctImageIconArray = porta_aviao_images;
                selectedVehicle = new PortaAviao();
                break;
            default:
                break;
        }
    }
    
    public void transformIntMatrixToBlockMatrix( int[][] map, BlockLabel[][] labelMatrix )
    {
        int vehicleIndex = 0;
        int lastInt = 0;
        
         for(int i = 0; i < 10; i++)
        {
            for(int j = 0; j < 10; j++)
            {           
                labelMatrix[i][j].setIcon( null );
                labelMatrix[i][j].setVehicle( null );         
            }
        }
      
        for(int i = 0; i < 10; i++)
        {
            for(int j = 0; j < 10; j++)
            {
                if( map[i][j] == 0 )
                {
                    labelMatrix[i][j].setIcon( null );
                    labelMatrix[i][j].setVehicle( null );
                    vehicleIndex = 0;
                    lastInt = 0;
                }
                else
                {                 
                    if( map[i][j] != lastInt )
                    {
                        vehicleIndex = 0;
                    }                    
                    setCorrectVehicleArrayByType( map[i][j] );
                    labelMatrix[i][j].setIcon( correctImageIconArray[vehicleIndex] );
                    labelMatrix[i][j].setVehicle( selectedVehicle );
                    vehicleIndex++;
                    lastInt = map[i][j];
                }
            }
        }
        
        setCorrectVehicleArrayByName();
    }
    
    public int[][] getIntMatrixFromBlockMatrix( BlockLabel[][] labelMatrix )
    {
        int[][] map = new int[10][10];

        for(int i = 0; i < 10; i++)
        {
            for(int j = 0; j < 10; j++)
            {
                if( labelMatrix[i][j].getVehicle() == null )
                {
                    map[i][j] = 0;
                }
                else
                {                 
                    map[i][j] = labelMatrix[i][j].getVehicle().getType();
                }
            }
        }
        
        return map;
    }
    
    public boolean isPossibleToStart()
    {
        int counter = 0;
        
        for(int i = 0; i < 10; i++)
        {
            for(int j = 0; j < 10; j++)
            {
                if( labelMatrix[i][j].getVehicle() != null )
                {
                    counter++;
                }
            }
        }
        
        return counter == 11;
    }
    
    
    private final BlockLabel[][] labelMatrix;
    
    private int[][] intMatrix;
    
    private final ImageIcon[] jet_images;
    private final ImageIcon[] submarine_images;
    private final ImageIcon[] navio_escolta_images;
    private final ImageIcon[] porta_aviao_images;
    
    private ImageIcon[] correctImageIconArray; 
    private Vehicle selectedVehicle;   

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel background_img;
    private javax.swing.JPanel charPanelPlayer;
    private javax.swing.JLabel comboBoxImage;
    private javax.swing.JLabel fileMessage;
    private javax.swing.JButton loadFileButton;
    private javax.swing.JPanel numberPanelPlayer;
    private javax.swing.JPanel panelPlayer;
    private javax.swing.JButton randomButton;
    private javax.swing.JButton startGame;
    private javax.swing.JPanel tablePanel;
    private javax.swing.JComboBox<String> vehicleComboBox;
    // End of variables declaration//GEN-END:variables
}
